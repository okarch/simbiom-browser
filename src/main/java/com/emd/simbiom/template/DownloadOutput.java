package com.emd.simbiom.template;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringWriter;

import java.sql.SQLException;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import java.util.Date;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateFormatUtils;
import org.apache.commons.lang.time.DateUtils;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.io.output.TeeOutputStream;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.Session;
import org.zkoss.zk.ui.Sessions;
import org.zkoss.zk.ui.event.Event;
import org.zkoss.zk.ui.event.EventListener;
import org.zkoss.zk.ui.event.Events;
// import org.zkoss.zk.ui.event.UploadEvent;

// import org.zkoss.util.media.Media;

// import org.zkoss.zul.Button;
// import org.zkoss.zul.Combobox;
import org.zkoss.zul.Decimalbox;
import org.zkoss.zul.Filedownload;
import org.zkoss.zul.ListModel;
// import org.zkoss.zul.ListModelArray;
import org.zkoss.zul.Messagebox;
import org.zkoss.zul.Textbox;
import org.zkoss.zul.Window;

import com.emd.simbiom.command.InventoryCommand;
import com.emd.simbiom.config.InventoryPreferences;
import com.emd.simbiom.dao.DocumentLoader;
import com.emd.simbiom.dao.SampleInventory;

import com.emd.simbiom.model.StorageDocument;

import com.emd.simbiom.view.ModelProducer;
import com.emd.simbiom.view.UIUtils;
import com.emd.simbiom.util.DataHasher;

import com.emd.util.Stringx;

import com.emd.zk.ZKContext;
import com.emd.zk.command.CommandException;

/**
 * <code>DownloadOutput</code> supports download of output files generated by template runs.
 *
 * Created: Sun Nov 23  13:20:39 2019
 *
 * @author <a href="mailto:">Oliver Karch</a>
 * @version 1.0
 */
public class DownloadOutput extends InventoryCommand {

    private static Log log = LogFactory.getLog(DownloadOutput.class);

    // private static final String CMD_DOCS_ADD    = "btDocumentAdd";
    // private static final String CMD_DOCS_DELETE = "btDocumentDelete";

    /**
     * Creates a new command.
     */
    public DownloadOutput() {
	super();
    }

    private InventoryPreferences getPreferences() {
	return InventoryPreferences.getInstance( getPortletId(), getUserId() );
    }

    private OutputSelector getOutputSelector() {
	ModelProducer[] mp = getPreferences().getResult( OutputSelector.class );
	if( mp.length <= 0 )
	    return null;
	return (OutputSelector)mp[0];
    }

    private StorageDocument getSelectedOutput( Window wnd ) {
	OutputSelector out = getOutputSelector();
	if( out == null ) {
	    log.error( "No output to select" );
	    return null;
	}
	return out.getSelectedOutput( wnd );
    }

    private File createUploadFile( String name ) 
     	throws IOException {

     	File tempF = File.createTempFile( "simbiom", null );
     	File dir = new File( tempF.getParentFile(), "simbiom" );
     	if( !dir.exists() && !dir.mkdir() ) {
     	    log.error( "Cannot create upload directory: "+dir );
     	    return null;
     	}
     	dir = new File( dir, String.valueOf(getUserId()) );
     	if( !dir.exists() && !dir.mkdir() ) {
     	    log.error( "Cannot create upload directory: "+dir );
     	    return null;
     	}
     	return new File( dir, Stringx.getDefault(name, "NONAME.temp" ) );
    }

    private boolean sendDownload( Window wnd, StorageDocument doc ) {
	File tempF = null;
	try {
	    tempF = createUploadFile( doc.getTitle() );
	}
	catch( IOException ioe ) {
	    log.error( ioe );
	    showMessage( wnd, "rowStorageMessage", "lbStorageMessage", "Error: "+
			 Stringx.getDefault( ioe.getMessage(), "General I/O error occured" ) );
	    return false;
	}

	log.debug( "Download file created: "+tempF );

	DocumentLoader dao = doc.getDocumentLoader();
	if( dao == null ) {
	    showMessage( wnd, "rowStorageMessage", "lbStorageMessage", "Error: Invalid database access." );
	    return false;
	}

	boolean success = false;
	String mime = Stringx.getDefault( doc.getMime(), "application/octet-stream");
	try {
	    OutputStream fos = new FileOutputStream( tempF );
	    success = dao.writeContent( doc.getMd5sum(), mime, fos );
	    fos.close();
	    
	}
	catch( IOException ioe ) {
	    log.error( ioe );
	    showMessage( wnd, "rowStorageMessage", "lbStorageMessage", "Error: "+
			 Stringx.getDefault( ioe.getMessage(), "General I/O error occured" ) );
	    return false;
	}

	if( success ) {
	    try {
		Filedownload.save( tempF, mime );
		return true;
	    }
	    catch( FileNotFoundException fnfe ) {
		log.error( fnfe );
		showMessage( wnd, "rowStorageMessage", "lbStorageMessage", "Error: File "+tempF+" not found." );
	    }
	}
	return false;
    }

    /**
     * Notifies this listener that an event occurs.
     */
    // public void onEvent(Event event)
    //  	throws java.lang.Exception {

    // 	Window wnd = UIUtils.getWindow( event );
    // 	StorageDocument uploadDoc = null;

    // 	if( event instanceof UploadEvent ) {
    // 	    log.debug( "Upload document: "+event );

    // 	    try {
    // 		uploadDoc = upload( event );
    // 	    }
    // 	    catch( IOException ioe ) {
    // 		showMessage( wnd, "rowStorageMessage", "lbStorageMessage", "Error: "+
    // 			     Stringx.getDefault( ioe.getMessage(), "General I/O error" ) );
    // 		log.error( ioe );
    // 		return;
    // 	    }

    // 	    if( uploadDoc != null ) 
    // 		storeUpload( wnd, uploadDoc );
    // 	}
    // 	else if( Events.ON_SELECT.equals( event.getName() ) ) {
    // 	    log.debug( "Download document: "+event );
	    
    // 	    Component cmp = event.getTarget();
    // 	    if( !(cmp instanceof Combobox) ) {
    // 		log.error( "Invalid event component:"+cmp );
    // 		return;
    // 	    }
    // 	    uploadDoc = selectedDocument( (Combobox)cmp );
    // 	    if( uploadDoc == null )
    // 		return;
    // 	    log.debug( "Document to download: "+uploadDoc );
    // 	    sendDownload( wnd, uploadDoc );
    // 	}
    // }

 
    /**
     * Executes the <code>Command</code>
     * @param context
     *      an {@link com.emd.zk.ZKContext} object holds the ZK specific data
     * 
     * @param wnd
     *      an {@link  org.zkoss.zul.Window} object representing the form
     *
     */
    public void execute( ZKContext context, Window wnd )
	throws CommandException {

	log.debug( "Download output" );
	StorageDocument doc = getSelectedOutput( wnd );
	if( doc == null )
	    return;
	log.debug( "Document to download: "+doc );
	sendDownload( wnd, doc );
    }    
    
} 
